        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:#include "rngs.h"
        -:    8:#include <time.h>
        -:    9:
        -:   10:#define NUMPLAYERS 2
        -:   11:#define SEED 1000
        -:   12:#define NUMTESTS 20000
        -:   13:#define TRUE 1
        -:   14:#define FALSE 0
        -:   15:
        1:   16:int main () {
        1:   17:  srand(time(NULL));
        -:   18:  struct gameState state;
        -:   19:
        1:   20:  int currentPlayer = 0;
        -:   21:
        -:   22:  // Random card pile
        1:   23:  int k[10] = {adventurer, smithy, village, minion, mine, 
        -:   24:    great_hall, feast, embargo, tribute, council_room};
        -:   25:
        -:   26:  // Testing Variables
        -:   27:  int handSize, deckSize, handpos;
        -:   28:  int hand1, hand2;
        -:   29:  int deck1, deck2;
        -:   30:  int discard1, discard2;
        -:   31:  int actions1, actions2;
        1:   32:  int passedTests = 0;
        1:   33:  int actionFail = 0, deckFail = 0, handFail = 0, discardFail = 0;
        -:   34:
    20001:   35:  for(int i = 0; i < NUMTESTS; i++) {
    20000:   36:    printf("Village Card Test RUN# %d\n", i+1);
    20000:   37:    initializeGame(NUMPLAYERS, k, SEED, &state);
    20000:   38:    deckSize = rand() % (MAX_DECK + 1);
    20000:   39:    handSize = rand() % (deckSize + 1);
        -:   40:
        -:   41:    //Retrieve current info from game
    20000:   42:    state.deckCount[0] = deckSize - handSize;
    20000:   43:    state.handCount[0] = handSize;
        -:   44:
        -:   45:    //
    20000:   46:    actions1 = state.numActions;
    20000:   47:    hand1 = state.handCount[0];
    20000:   48:    deck1 = state.deckCount[0];
    20000:   49:    discard1 = state.playedCardCount;
    20000:   50:    handpos = state.hand[currentPlayer][state.handCount[currentPlayer] - 1];
        -:   51:
        -:   52:
    20000:   53:    villageCard(&state, handpos);
        -:   54:
        -:   55:    //Added randomizer here to test discard fails for 100% coverage
    20000:   56:    discard2 = (state.playedCardCount + (rand() % 2));
    20000:   57:    actions2 = (state.numActions + (rand() % 2));
        -:   58:    //actions2 = state.numActions;
    20000:   59:    hand2 = state.handCount[0];
    20000:   60:    deck2 = state.deckCount[0];
        -:   61:
    20000:   62:    int passed = TRUE;
        -:   63:
    20000:   64:    if(hand2 != (hand1)) {
      283:   65:      printf("Failed. Cards in hand are incorrect.\n");
      283:   66:      handFail++;
      283:   67:      passed = FALSE;
        -:   68:    }
        -:   69:
    20000:   70:    if(discard2 != (discard1 + 1)) {
    10028:   71:      printf("Failed. Smithy still in hand and was not discarded.\n");
    10028:   72:      discardFail++;
    10028:   73:      passed = FALSE;
        -:   74:    }
        -:   75:
    20000:   76:    if(deck2 != (deck1 - 1)) {
      283:   77:      printf("Failed. Cards in deck are incorrect.\n");
      283:   78:      deckFail++;
      283:   79:      passed = FALSE;
        -:   80:    }
        -:   81:
    20000:   82:    if(actions2 != (actions1 + 2)) {
     9999:   83:      printf("Failed. Number of actions are incorrect.\n");
     9999:   84:      actionFail++;
     9999:   85:      passed = FALSE;
        -:   86:    }
        -:   87:
    20000:   88:    if(passed == TRUE){
     4910:   89:      printf("Passed. No Failures.\n");
     4910:   90:      passedTests++;
        -:   91:    }
        -:   92:
        -:   93:}
        -:   94:  //Display counter of the results of tests
        1:   95:  printf("# of passed tests: %d\n", passedTests);
        1:   96:  printf("# of hand tests failed: %d\n", handFail);
        1:   97:  printf("# of deck tests failed: %d\n", deckFail);
        1:   98:  printf("# of action tests failed: %d\n", actionFail);
        1:   99:  printf("# of discard tests failed: %d\n", discardFail);
        1:  100:  printf("End of Village Card test.\n");
        -:  101:
        1:  102:  return 0;
        -:  103:}
